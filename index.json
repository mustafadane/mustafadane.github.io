[{"categories":null,"contents":"$PL/IT is a mobile tab splitting app for friends who go out to eat but have different spending habits. iOS and Android users can upload photos of their receipts and claim ownership of each item in that receipt. Once the event is closed, each user is shown how much they should pay or charge other users in the event.\nDevelopment This was built using Google\u0026rsquo;s Cloud Vision API with a front end in React Native and a back-end in Firebase.\nWe wrote a custom algorithm to parse the results from Cloud Vision\u0026rsquo;s API into line items which we store in Firebase\u0026rsquo;s real-time database. Firebase supports not only our app\u0026rsquo;s database and authentication, but also user interaction. In addition, this non-relational database allows us to set up subscriptions to an SDK to handle queries almost instantly.\nContributors  Brittany Hill Julianne Crawford Lotus Tan Mustafa Dane  ","permalink":"https://mustafadane.com/projects/creations/split/","tags":["React Native","Firebase","Google Cloud Vision API","AWS"],"title":"SPL/IT"},{"categories":null,"contents":"Have you ever had a song in your playlist that you keep skipping? Then, use Adaptify to have an adaptive playlist. Any song that are skipped 3 times will be deleted from your playlist!\n Utilized: Spotify Android SDK and API, React Native, Heroku deployed server with Node.js and Express.  Watch a presentation here\n","permalink":"https://mustafadane.com/projects/creations/adaptify/","tags":["React Native","Spotify Android SDK","Node.js","Express"],"title":"Adaptify: Adaptive Playlist Experience"},{"categories":null,"contents":"This is a web application to create 10-year-challenge photo from your photos at Facebook. User logs in with facebook and app brings a random photo from around 10 years ago and now. Then, puts them together!\n","permalink":"https://mustafadane.com/projects/creations/10year/","tags":["React","Express","Passport","Facebook Graph API","Facebook Oauth Login","webpack"],"title":"Facebook 10 Year Challenge Generator"},{"categories":null,"contents":"This is a project to be used internally at Fullstack Academy of Code. Main purpose is to create projects and tasks for incoming students in Asana and edit all of them at once. PostgreSQL database is used to keep the tasks and projects data. Node/Express server is used to communicate with database and Asana API. React and Blueprint.js are used in the front-end. Whole project is written in TypeScript!\n Worked with other software developers and supervised by campus director, Ben Neiswander. Project aims to create a full-stack website for bulk creating and updating projects with tasks for students at Fullstack Academy. My involvement was to create front-end with React, Node.js, JavaScript, HTML, and CSS  ","permalink":"https://mustafadane.com/projects/creations/playbook/","tags":["TypeScript","React","Express","Node.js","PostgreSQL"],"title":"Student Playbook"},{"categories":null,"contents":" Full e-commerce experience for guest and logged in users and with admin dashboard. Utilized: Node.js, Express, PostgreSQL, Sequelize, Passport, OAuth, Webpack, Babel, Mocha, Chai, Enzyme, React, Redux, Semantic UI, HTML, CSS. Done in a group of 4 students in an agile work environment.  Preview ","permalink":"https://mustafadane.com/projects/creations/yesternow/","tags":["Node.js","Express","PostgreSQL","Sequelize","React"],"title":"Yesternow"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml\n[outputs] home = [\u0026#34;HTML\u0026#34;, \u0026#34;JSON\u0026#34;] Searching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category\n... \u0026#34;contents\u0026#34;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026#34;tags\u0026#34;:{{ .Params.tags | jsonify }}{{end}}, \u0026#34;categories\u0026#34; : {{ .Params.categories | jsonify }}, ... Edit fuse.js options to Search static/js/search.js\nkeys: [ \u0026#34;title\u0026#34;, \u0026#34;contents\u0026#34;, \u0026#34;tags\u0026#34;, \u0026#34;categories\u0026#34; ] ","permalink":"https://mustafadane.com/search/","tags":null,"title":"Search Results"}]